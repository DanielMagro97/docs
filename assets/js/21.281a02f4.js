(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{221:function(e,t,n){"use strict";n.r(t);var s=n(0),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"joining-the-testnet"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#joining-the-testnet"}},[e._v("#")]),e._v(" Joining the Testnet")]),e._v(" "),n("p",[e._v("This guide will cover setting up your nodes on the Public Testnet. There is some\nassumption of knowledge on the use of basic command line tools and docker.")]),e._v(" "),n("h2",{attrs:{id:"prerequisites"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites"}},[e._v("#")]),e._v(" Prerequisites")]),e._v(" "),n("p",[e._v("Before following this guide, make sure you've followed the "),n("router-link",{attrs:{to:"/operators/prerequisites.html"}},[e._v("Prerequisites\nGuide")]),e._v(" and understand how to use the "),n("code",[e._v("oasis-node")]),e._v(" binary.")],1),e._v(" "),n("h3",{attrs:{id:"systems"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#systems"}},[e._v("#")]),e._v(" Systems")]),e._v(" "),n("p",[e._v("This guide assumes that you have two different physical machines that you will\nuse for deployment. These machines are the following:")]),e._v(" "),n("ul",[n("li",[e._v("Your local system, henceforth called the "),n("code",[e._v("localhost")]),e._v(".")]),e._v(" "),n("li",[e._v("A remote system to run as an Oasis node, henceforth called the "),n("code",[e._v("server")]),e._v(".")])]),e._v(" "),n("p",[e._v("The reason for this is to ensure protection of the keys used to\nsetup your node. This guide does not include the use of HSMs, but\nshould be used in the future.")]),e._v(" "),n("h2",{attrs:{id:"creating-your-entity"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#creating-your-entity"}},[e._v("#")]),e._v(" Creating Your Entity")]),e._v(" "),n("p",[e._v("Everything in this section should be done on the "),n("code",[e._v("localhost")]),e._v(" as there are\nsensitive items that will be created.")]),e._v(" "),n("h3",{attrs:{id:"creating-a-working-directory"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-working-directory"}},[e._v("#")]),e._v(" Creating a Working Directory")]),e._v(" "),n("p",[e._v("During this entity initialization process, we will create keys and other\nimportant artifacts that are necessary for the deployment of nodes on the\nnetwork. It is important that you save and protect the generated artifacts in\nthis directory if you intend to use them to register your entity and nodes. We\nwill reference the working directory on "),n("code",[e._v("localhost")]),e._v(" as "),n("code",[e._v("/localhostdir")]),e._v("\nthroughout the documentation. Inside "),n("code",[e._v("/localhostdir")]),e._v(" you should create the\nfollowing directories:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("entity")]),e._v(" - This will store your entity. The private contents in this directory\nare safest if used on a machine kept disconnected from the internet. The\ndirectory permissions should be "),n("code",[e._v("rwx------")])]),e._v(" "),n("li",[n("code",[e._v("node1")]),e._v(' - This will store a node we are calling "node1". The name is not\nimportant. It simply represents one of your nodes. You can rename it to whatever you\nwish. The private contents of this directory will be used on the node itself.\nYou should initialize this information on a system with access to the entity\'s\nprivate key. The directory permissions should be '),n("code",[e._v("rwx------")])])]),e._v(" "),n("p",[e._v("To create the directory structure, use the following command:")]),e._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[e._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" -m700 -p "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("entity,node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),n("h3",{attrs:{id:"copying-the-genesis-file"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#copying-the-genesis-file"}},[e._v("#")]),e._v(" Copying the Genesis File")]),e._v(" "),n("p",[e._v("The latest genesis file can be found "),n("router-link",{attrs:{to:"/operators/current-testnet-parameters.html"}},[e._v("here")]),e._v(".\nYou should download the latest "),n("code",[e._v("genesis.json")]),e._v(" file, copy it to the working\ndirectory and save its path into an environment variable:")],1),e._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[e._v("$ "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("GENESIS_FILE_PATH")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/localhostdir/genesis.json\n")])])]),n("p",[e._v("This will be needed later when generating transactions.")]),e._v(" "),n("h3",{attrs:{id:"initializing-an-entity"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#initializing-an-entity"}},[e._v("#")]),e._v(" Initializing an Entity")]),e._v(" "),n("p",[e._v("The entity, as "),n("router-link",{attrs:{to:"/architectural-overview.html#entities-and-key-management"}},[e._v("described\nhere")]),e._v(" is critical to\noperating nodes on the network as it controls the stake attached to a given\nindividual or organization on the network. In the future we will support using\nentity keys through HSMs to ensure that entity keys cannot be easily\ncompromised. We strongly suggest that you do not use any entity that is generated\nwith the current process on the Mainnet. During the Public Testnet and staking\ncompetition we would also suggest that you generate the entity on a system that has\nno network connection to provide rudimentary protection for the entity key.\nHowever, it is up to you to determine your own security practices.")],1),e._v(" "),n("p",[e._v("To initialize an entity simply run the following from "),n("code",[e._v("/localhostdir/entity")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ oasis-node registry entity init\n")])])]),n("p",[e._v("This will generate 3 files in "),n("code",[e._v("/localhostdir/entity")])]),e._v(" "),n("ul",[n("li",[n("code",[e._v("entity.pem")]),e._v(" - The private key of the entity. "),n("strong",[e._v("NEVER SHARE THIS AS IT CAN BE\nUSED TO TRANSFER STAKE")])]),e._v(" "),n("li",[n("code",[e._v("entity.json")]),e._v(" - The entity descriptor. This is the JSON of the unsigned\ninformation to be sent to the registry application on the network.")]),e._v(" "),n("li",[n("code",[e._v("entity_genesis.json")]),e._v("- This JSON object contains the entity descriptor that\nhas been signed with the the "),n("code",[e._v("entity.pem")]),e._v(". This is meant to be shared for\ninclusion on the genesis block.")])]),e._v(" "),n("h3",{attrs:{id:"initializing-a-node"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#initializing-a-node"}},[e._v("#")]),e._v(" Initializing a Node")]),e._v(" "),n("p",[e._v("A node registers itself to the network when the node starts up. However, in\norder to validate itself, the entity signs a public key associated to the\nnode. This allows the node registration to happen without the uploading entity key\nto the internet. To initialize a validator node, run the following from\nthe "),n("code",[e._v("/localhostdir/node1")]),e._v(" directory.")]),e._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[e._v("$ "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("STATIC_IP")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("YOUR_STATIC_IP"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n$ oasis-node registry node init "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --entity /localhostdir/entity "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --node.consensus_address "),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$STATIC_IP")]),e._v(":26656 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --node.is_self_signed "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --node.role validator\n")])])]),n("p",[e._v("This command will create a validator node's identity so that it can be a\nself-signed node (this is what allows self registration). There are more options\nfor this that you can explore by running "),n("code",[e._v("oasis-node registry node init --help")]),e._v(".\nThe options shown above are the minimum.")]),e._v(" "),n("p",[e._v("The command will generate the following files:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("consensus.pem")]),e._v(" - The node's private key used for consensus. "),n("strong",[e._v("DO NOT SHARE")])]),e._v(" "),n("li",[n("code",[e._v("consensus_pub.pem")]),e._v(" - The node's public key for consensus")]),e._v(" "),n("li",[n("code",[e._v("identity.pem")]),e._v(" - The node's identity private key. "),n("strong",[e._v("DO NOT SHARE")])]),e._v(" "),n("li",[n("code",[e._v("identity_pub.pem")]),e._v(" - The node's identity public key.")]),e._v(" "),n("li",[n("code",[e._v("node_genesis.json")]),e._v(" - The node's details if you wish to include this node on\nthe genesis file of the network.")]),e._v(" "),n("li",[n("code",[e._v("p2p.pem")]),e._v(" - The node's private key for libp2p. "),n("strong",[e._v("DO NOT SHARE")])]),e._v(" "),n("li",[n("code",[e._v("p2p_pub.pem")]),e._v(" - The node's public key for libp2p.")]),e._v(" "),n("li",[n("code",[e._v("tls_identity.pem")]),e._v(" - The node's TLS key for grpc's TLS . "),n("strong",[e._v("DO NOT SHARE")])]),e._v(" "),n("li",[n("code",[e._v("tls_identity_cert.pem")]),e._v(" - The node's TLS cert for grpc's TLS.")])]),e._v(" "),n("h4",{attrs:{id:"adding-the-node-to-the-entity-descriptor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#adding-the-node-to-the-entity-descriptor"}},[e._v("#")]),e._v(" Adding the Node to the Entity Descriptor")]),e._v(" "),n("p",[e._v("Once the node has been initialized, we need to add it to the entity descriptor\nso that it can properly register itself when the node starts up.")]),e._v(" "),n("p",[e._v("Execute the following command in the "),n("code",[e._v("/localhostdir/node1")]),e._v(" directory:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ oasis-node registry entity update \\\n  --datadir /localhostdir/entity \\\n  --entity.node.descriptor node_genesis.json\n")])])]),n("p",[e._v("This will update the entity descriptor "),n("code",[e._v("entity.json")]),e._v(" and subsequently the\n"),n("code",[e._v("entity_genesis.json")]),e._v(" file that contains the signed entity descriptor payload.")]),e._v(" "),n("h4",{attrs:{id:"initializing-additional-nodes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#initializing-additional-nodes"}},[e._v("#")]),e._v(" Initializing Additional Nodes")]),e._v(" "),n("p",[e._v("At the time of Public Testnet, the network will only have validators and no\nother committees (no compute, no key management, no storage, etc.). At this time\nthis documentation does not include instructions in configuring anything beyond\na single validator. If you'd like to create more validator nodes you can simply\nrepeat the process above to initialize the artifacts for an additional node (and\nrenaming the proper things). Each node will require at least the network's\ndefined minimum staking amount (at this time this is 100 tokens).")]),e._v(" "),n("h2",{attrs:{id:"running-an-oasis-node-on-the-server"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#running-an-oasis-node-on-the-server"}},[e._v("#")]),e._v(" Running an Oasis Node on the "),n("code",[e._v("server")])]),e._v(" "),n("h3",{attrs:{id:"setting-up-the-oasis-node-s-working-directory"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setting-up-the-oasis-node-s-working-directory"}},[e._v("#")]),e._v(" Setting up the Oasis Node's Working Directory")]),e._v(" "),n("p",[e._v("Before we run the node on the "),n("code",[e._v("server")]),e._v(" we need to ensure that we have a place to\nstore necessary files for the node. For this guide, we will call this working\ndirectory "),n("code",[e._v("/serverdir")]),e._v(" directory.")]),e._v(" "),n("h4",{attrs:{id:"setting-up-the-the-serverdir-directory"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setting-up-the-the-serverdir-directory"}},[e._v("#")]),e._v(" Setting up the the "),n("code",[e._v("/serverdir")]),e._v(" Directory")]),e._v(" "),n("p",[e._v("In the "),n("code",[e._v("/serverdir")]),e._v(" directory we will create the following subdirectories:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("etc/")]),e._v(" - this is to store the configuration")]),e._v(" "),n("li",[n("code",[e._v("node/")]),e._v(" - this is to store the node's data")]),e._v(" "),n("li",[n("code",[e._v("node/entity/")]),e._v(" - this is to store the public components of the node's entity")])]),e._v(" "),n("p",[e._v("You can make this directory structure by calling the following command:")]),e._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[e._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" -p /serverdir/"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("etc,node/entity"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),n("h4",{attrs:{id:"copying-the-node-artifacts-from-localhostdir"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#copying-the-node-artifacts-from-localhostdir"}},[e._v("#")]),e._v(" Copying the Node Artifacts from "),n("code",[e._v("/localhostdir")])]),e._v(" "),n("p",[e._v("In order for the node registration to work properly, as defined in\n"),n("code",[e._v("/localhostdir/entity.json")]),e._v(", you must copy the node's artifacts you generated in\nthe "),n("a",{attrs:{href:"#initializing-a-node"}},[e._v("Initializing a Node")]),e._v(" section. To do so upload the\nfollowing files from "),n("code",[e._v("/localhostdir/node1")]),e._v(" to "),n("code",[e._v("/serverdir/node")]),e._v(" over a secure channel:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("consensus.pem")])]),e._v(" "),n("li",[n("code",[e._v("consensus_pub.pem")])]),e._v(" "),n("li",[n("code",[e._v("identity.pem")])]),e._v(" "),n("li",[n("code",[e._v("identity_pub.pem")])]),e._v(" "),n("li",[n("code",[e._v("node_genesis.json")])]),e._v(" "),n("li",[n("code",[e._v("p2p.pem")])]),e._v(" "),n("li",[n("code",[e._v("p2p_pub.pem")])]),e._v(" "),n("li",[n("code",[e._v("tls_identity.pem")])]),e._v(" "),n("li",[n("code",[e._v("tls_identity_cert.pem")])])]),e._v(" "),n("p",[e._v("_You may notice that some of these files were listed as "),n("strong",[e._v("DO NOT SHARE")]),e._v(". In the\nfuture these keys should be generated and referenced from HSM. Before we have\nHSM support, these keys should be kept as secure as possible on the "),n("code",[e._v("server")]),e._v(".")]),e._v(" "),n("h4",{attrs:{id:"copying-the-public-entity-artifacts-from-localhostdir"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#copying-the-public-entity-artifacts-from-localhostdir"}},[e._v("#")]),e._v(" Copying the Public Entity Artifacts from "),n("code",[e._v("/localhostdir")])]),e._v(" "),n("p",[e._v("We will also need to have public entity artifacts from the "),n("code",[e._v("/localhostdir")]),e._v(". Copy\nthe file from "),n("code",[e._v("/localhostdir/entity/entity.json")]),e._v(" to\n"),n("code",[e._v("/serverdir/node/entity/entity.json")]),e._v(".")]),e._v(" "),n("h4",{attrs:{id:"copying-the-genesis-files"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#copying-the-genesis-files"}},[e._v("#")]),e._v(" Copying the Genesis Files")]),e._v(" "),n("p",[e._v("The latest genesis files can be found "),n("router-link",{attrs:{to:"/operators/current-testnet-parameters.html"}},[e._v("here")]),e._v(".\nYou should download the latest "),n("code",[e._v("genesis.json")]),e._v(" file and copy it to\n"),n("code",[e._v("/serverdir/etc/genesis.json")]),e._v(".")],1),e._v(" "),n("h4",{attrs:{id:"configuring-the-oasis-node"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configuring-the-oasis-node"}},[e._v("#")]),e._v(" Configuring the Oasis Node")]),e._v(" "),n("p",[e._v("There are a variety of options available when running an Oasis node. The\nfollowing YAML file is a basic configuration for a validator node on the\nnetwork.")]),e._v(" "),n("p",[e._v("Before using this configuration you should collect the following information to\nreplace the")]),e._v(" "),n("div",{pre:!0},[n("p",[n("code",[e._v("{{ var }}")])])]),n("p",[e._v("variables present in the configuration file:")]),e._v(" "),n("div",{pre:!0},[n("p",[n("code",[e._v("{{ external_address }}")])])]),n("p",[e._v("This is the external IP you wish to use when\nregistering this node. If you are using a Sentry Node, you should use the\npublic IP of that machine.")]),e._v(" "),n("div",{pre:!0},[n("p",[n("code",[e._v("{{ seed_node_address }}")])])]),n("p",[e._v("This the seed node address in the form")]),e._v(" "),n("div",{pre:!0},[n("p",[n("code",[e._v("{{ ID }}@{{ IP }}:{{ PORT }}")])])]),n("p",[e._v("this is published "),n("router-link",{attrs:{to:"/operators/current-testnet-parameters.html"}},[e._v("here")])],1),e._v(" "),n("p",[e._v("Create a file, "),n("code",[e._v("/serverdir/etc/config.yml")]),e._v(", with the following\ncontents:")]),e._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("##")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Oasis Node Configuration")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This file's configurations are derived from the command line args found in the")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# root command of the oasis-node binary. For more information execute:")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#     oasis-node --help")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Settings on the command line that are separated by a dot all belong to the")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# same nested object. So "--foo.bar.baz hello" would translate to:')]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#     foo:")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#       bar:")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#         baz: hello")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("##")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set this to where you wish to store node data. The node artifacts")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# should also be located in this directory (for us this is /serverdir/node)")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("datadir")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" /serverdir/node\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## THESE NEXT 3 LINES ARE TEMPORARY YOU SHOULD NOT EXPOSE THIS PORT IN ANY WAY")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("grpc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("debug")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("port")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"42261"')]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Logging.")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Per-module log levels are defined below. If you prefer just one unified log")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# level, you can use:")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# log:")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   level: debug")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("level")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Per-module log levels. Longest prefix match will be taken. Fallback to")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# "default", if no match.')]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("default")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" debug\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("tendermint")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" warn\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("tendermint/context")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" error\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("format")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" JSON\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default logs are output to stdout. If you're running this in docker keep the")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# default")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#file: /var/log/oasis-node.log")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Path to the genesis file for the current version of the network.")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("genesis")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("file")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" /serverdir/etc/genesis.json\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Worker configuration.")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("worker")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("registration")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# In order for the node to register itself the entity.json of the entity used to")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# provision the node must be available on the node")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("entity")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" /serverdir/node/entity/entity.json\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Consensus backend.")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("consensus")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Setting this to true will mean that the node you're deploying will attempt")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to register as a validator.")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("validator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("True")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Tendermint backend configuration.")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("tendermint")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("abci")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("prune")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("strategy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" keep_n\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("num_kept")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("86400")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("core")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("listen_address")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" tcp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("//0.0.0.0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("26656")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The external_address option is used when registering this node to the")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# network. If you are using a sentry node then this should be the public")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ip of the sentry node.")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("external_address")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" tcp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("//"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" external_address "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("26656")]),e._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("db")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("backend")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" boltdb\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("debug")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("addr_book_lenient")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("False")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("seeds")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"{{ seed_node_address }}"')]),e._v("\n")])])]),n("h3",{attrs:{id:"starting-the-oasis-node"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#starting-the-oasis-node"}},[e._v("#")]),e._v(" Starting the Oasis Node")]),e._v(" "),n("h4",{attrs:{id:"starting-with-docker"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#starting-with-docker"}},[e._v("#")]),e._v(" Starting with docker")]),e._v(" "),n("p",[e._v("For those of you who are relying on the\n"),n("a",{attrs:{href:"https://hub.docker.com/r/oasislabs/oasis-node",target:"_blank",rel:"noopener noreferrer"}},[e._v("oasis-node"),n("OutboundLink")],1),e._v(" docker container,\nthe command to start the oasis-node is:")]),e._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[e._v("$ docker run --entrypoint /oasis/bin/oasis-node "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --name oasis_node "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --volume /serverdir:/serverdir "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --workdir /serverdir/node "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    -p "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("26656")]),e._v(":26656 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    -p "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("42261")]),e._v(":42261 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    oasislabs/oasis-node:"),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$OASIS_NODE_TAG")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --config /servernode/etc/config.yml\n")])])]),n("p",[n("em",[e._v("Note: the "),n("code",[e._v("-p 42261:42261")]),e._v(" port binding is temporary. We will notify all of you\nwhen this no longer needs to be bound.")])]),e._v(" "),n("p",[e._v("This will create a docker container named "),n("code",[e._v("oasis_node")]),e._v(". This is useful to have a\nnamed container so it can be referenced later. If you name it something else,\nthen be aware that the docs will reference "),n("code",[e._v("oasis_node")]),e._v(" for this docker\ncontainer.")]),e._v(" "),n("p",[n("em",[e._v("It is up to you to configure these options how you see fit. This invocation of\nthe server process will not restart automatically. If you'd like to run this in\nthe background add the docker flag "),n("code",[e._v("--detach")])])]),e._v(" "),n("h4",{attrs:{id:"starting-without-docker"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#starting-without-docker"}},[e._v("#")]),e._v(" Starting without docker")]),e._v(" "),n("p",[e._v("If you have built the "),n("code",[e._v("oasis-node")]),e._v(" binary on your own, you can start the server\nby running the command below. Please note, the node is, by default, configured to run in the\nforeground. You will need to use a process supervisor like\n"),n("a",{attrs:{href:"http://supervisord.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("supervisord"),n("OutboundLink")],1),e._v(",\n"),n("a",{attrs:{href:"https://github.com/systemd/systemd",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemd"),n("OutboundLink")],1),e._v(", etc.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ oasis-node --config /serverdir/etc/config.yml\n")])])]),n("h3",{attrs:{id:"verifying-the-connection-to-the-network"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#verifying-the-connection-to-the-network"}},[e._v("#")]),e._v(" Verifying the Connection to the Network")]),e._v(" "),n("p",[e._v("As part of the starting the server process, the "),n("code",[e._v("oasis-node")]),e._v(" binary will, by\ndefault, setup an internal unix socket in the "),n("code",[e._v("datadir")]),e._v(" of the Node. This socket\ncan be used to communicate to the node and query details about the network.")]),e._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[e._v("$ oasis-node registry entity list -a /serverdir/node/internal.sock\n")])])]),n("p",[e._v("If this command fails, you'll receive a non-zero exit code and there's a high\nlikelihood that you are not connected to the network. However, if it does work\nproperly it should respond with output like:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("2317a8eef10e470434411aebac8f1a8c0f1c6a0d35ff53921f8bc70588bb66b2\n8e3873f84f7f2250eb456dc598dc56b812f561137fe41c383128e6c14e0e2e74\ncf3b004bd98f3e1eab92e97c5fa6cbe4d42a00133c515a2440fefaca514a48ff\n")])])]),n("p",[e._v("Once you get to a node that's connected you can move on to the next section as\nyour node is not yet registered as a validator on the Oasis Testnet.")]),e._v(" "),n("h2",{attrs:{id:"signing-up-for-testnet-tokens"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#signing-up-for-testnet-tokens"}},[e._v("#")]),e._v(" Signing up for Testnet Tokens")]),e._v(" "),n("p",[n("em",[e._v("This won't be necessary if you are in the genesis file or already have tokens\nthrough some other means. For most people, this will not be true.")])]),e._v(" "),n("p",[e._v("In order to participate on the Testnet you'll need to have tokens. You'll use\nthese tokens to register your entity and stake on the network. To get tokens,\nyou'll need to sign up with "),n("a",{attrs:{href:"https://oasisfoundation.typeform.com/to/dlcekq",target:"_blank",rel:"noopener noreferrer"}},[e._v("this\nform"),n("OutboundLink")],1),e._v(". While filling out the\nform, it will ask for your Entity Public Key. This is the same as your Entity\nAccount ID and can be found in the "),n("code",[e._v("/localhostdir/entity/entity.json")]),e._v(". In this\nJSON file, the Entity Public Key is the "),n("code",[e._v("id")]),e._v(" field.")]),e._v(" "),n("h3",{attrs:{id:"example"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[e._v("#")]),e._v(" Example")]),e._v(" "),n("p",[e._v("In the following example "),n("code",[e._v("entity.json")]),e._v(", the Entity Public Key is\n"),n("code",[e._v("TszGIrC1X08czcik0DgAnmGPzjf8pfQ47bgrjpTmbro=")]),e._v(".")]),e._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"id"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"TszGIrC1X08czcik0DgAnmGPzjf8pfQ47bgrjpTmbro="')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"nodes"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"C93lKVNNkca3Oo9m1exiz22NvMBxxYjkyBrt2+eFAds="')]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"registration_time"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1573585972")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"allow_entity_signed_nodes"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),n("h2",{attrs:{id:"staking-and-registering"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#staking-and-registering"}},[e._v("#")]),e._v(" Staking and Registering")]),e._v(" "),n("p",[n("em",[e._v("This won't be necessary if your Entity is in the genesis file.")])]),e._v(" "),n("p",[e._v("Once you have been funded, you can now complete the process of connecting your\nnode by staking so that you can register your entity and register your node.")]),e._v(" "),n("h3",{attrs:{id:"generating-a-staking-escrow-transaction-on-the-localhost"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#generating-a-staking-escrow-transaction-on-the-localhost"}},[e._v("#")]),e._v(" Generating a Staking (Escrow) Transaction on the "),n("code",[e._v("localhost")])]),e._v(" "),n("p",[e._v("Your Entity private key should ideally be disconnected from the internet on the\n"),n("code",[e._v("localhost")]),e._v(". You want this because the Entity private key is used to authorize\ntransactions on your staking account. To ensure that the Entity private key\nisn't sent to the "),n("code",[e._v("server")]),e._v(" we will generate a transaction on the "),n("code",[e._v("localhost")]),e._v('.\nThe staking application calls "staking" an escrow. For the testnet, the current\nminimum stake required to register an entity and register a node as a validator\nis 100 tokens. So we will generate an escrow transaction that escrows 100 tokens\non your own Entity.')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ oasis-node stake account gen_escrow \\\n    --genesis.file $GENESIS_FILE_PATH \\\n    --entity $ENTITY_DIR_PATH \\\n    --stake.escrow.account $ACCOUNT_ID \\\n    --stake.transaction.amount 100000000000000000000 \\\n    --stake.transaction.file $OUTPUT_TX_FILE_PATH \\\n    --stake.transaction.nonce 0\n")])])]),n("p",[e._v("The parameters are as follows:")]),e._v(" "),n("ul",[n("li",[n("p",[n("code",[e._v("$ENTITY_DIR_PATH")]),e._v(" - For this guide this would be "),n("code",[e._v("/localhostdir/entity/")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("$OUTPUT_TX_FILE_PATH")]),e._v(" - This is where you wish to output the signed\ntransaction file. For this guide we will use "),n("code",[e._v("/localhostdir/signed-escrow.tx")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("$ACCOUNT_ID")]),e._v(" - This is the hex encoding of the Entity Public Key. To derive this you\ncan use the following python3 code:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import binascii, base64\n\ndef account_id_from_b64(base64_id):\n    """base64_id can be found in entity.json in the `id` field"""\n    return binascii.hexlify(base64.b64decode(base64_id))\n\naccount_id_from_b64("<YOUR ENTITY PUBLIC KEY>")\n>>> "deadbeefdeadbeefdeadbeef..."\n')])])])])]),e._v(" "),n("p",[e._v("Note that the option "),n("code",[e._v("--stake.transaction.amount")]),e._v(" looks like a very large\nnumber. This is actually equivalent to 100 tokens on the Testnet as each unit\nvalue used to track the account balance is 1x10^-18 tokens.")]),e._v(" "),n("h3",{attrs:{id:"submitting-your-transaction-on-the-server"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#submitting-your-transaction-on-the-server"}},[e._v("#")]),e._v(" Submitting Your Transaction on the "),n("code",[e._v("server")])]),e._v(" "),n("p",[e._v("To complete the staking process we need to submit your escrow transaction:")]),e._v(" "),n("ol",[n("li",[e._v("Copy the file "),n("code",[e._v("/localhostdir/signed-escrow.tx")]),e._v(" on the "),n("code",[e._v("localhost")]),e._v(" to\n"),n("code",[e._v("/serverdir/signed-escrow.tx")]),e._v(" on the "),n("code",[e._v("server")]),e._v(".")]),e._v(" "),n("li",[e._v("Call "),n("code",[e._v("oasis-node")]),e._v(" like so:")])]),e._v(" "),n("p",[e._v("If you're using docker use:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ docker exec -it oasis_node /bin/bash\n$ oasis-node stake account submit \\\n  --stake.transaction.file /serverdir/signed-escrow.tx \\\n  -a /serverdir/node/internal.sock\n")])])]),n("p",[e._v("Without docker:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ oasis-node stake account submit \\\n  --stake.transaction.file /serverdir/signed-escrow.tx \\\n  -a /serverdir/node/internal.sock\n")])])]),n("h3",{attrs:{id:"registering-your-entity"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#registering-your-entity"}},[e._v("#")]),e._v(" Registering Your Entity")]),e._v(" "),n("p",[e._v("As a final step, you now need to register your entity onto the network.")]),e._v(" "),n("p",[n("strong",[e._v("TEMPORARY FIX")]),e._v(": At this time many of these instructions are a temporary fix\ndue to missing features on the current "),n("code",[e._v("oasis-node")]),e._v(" cli.")]),e._v(" "),n("h4",{attrs:{id:"port-forwarding"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#port-forwarding"}},[e._v("#")]),e._v(" Port Forwarding")]),e._v(" "),n("p",[e._v("On one instance of a terminal on the "),n("code",[e._v("localhost")]),e._v(" execute the following to handle\na port forwarding so you can make entity requests. "),n("em",[e._v("Unfortunately, if you're\nusing docker on your "),n("code",[e._v("localhost")]),e._v(" you will also have to ssh to your "),n("code",[e._v("server")]),e._v("\nwithin your the docker container. We apologize for the inconvenience this is a\ntemporary measure.")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ ssh $USER@$SERVER_IP -L 42261:127.0.0.1:42261 -N\n")])])]),n("h4",{attrs:{id:"registering-your-node-on-the-network"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#registering-your-node-on-the-network"}},[e._v("#")]),e._v(" Registering Your Node on the Network")]),e._v(" "),n("p",[e._v("On a different terminal from your ssh port forward above, execute the following:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ oasis-node registry entity register --datadir /localhostdir/entity\n")])])]),n("p",[e._v("If everything is successful you will get a zero exit code.")]),e._v(" "),n("h3",{attrs:{id:"checking-that-your-node-is-properly-registered"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#checking-that-your-node-is-properly-registered"}},[e._v("#")]),e._v(" Checking that Your Node is Properly Registered")]),e._v(" "),n("p",[n("em",[e._v("We understand these instructions for verification need to improve. Any\nassistance is welcome 😉")])]),e._v(" "),n("p",[e._v("To ensure that your node is properly connected as a Validator on the network, We\ncan check to see the node's identity on in the registry's node list.\nUnfortunately, at this time this is a bit of a manual process.")]),e._v(" "),n("h3",{attrs:{id:"getting-the-node-s-consensus-pub-pem-identity"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#getting-the-node-s-consensus-pub-pem-identity"}},[e._v("#")]),e._v(" Getting the Node's consensus_pub.pem Identity")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("cat /serverdir/node/consensus_pub.pem\n")])])]),n("p",[e._v("This will look like:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("-----BEGIN ED25519 PUBLIC KEY-----\ns+vZ71qeZnlq0HmQSDBiWn2OKcy3fXOuPMu76/5GkUI=\n-----END ED25519 PUBLIC KEY-----\n")])])]),n("p",[e._v("We will use "),n("code",[e._v("s+vZ71qeZnlq0HmQSDBiWn2OKcy3fXOuPMu76/5GkUI=")]),e._v(". As the key to search for.")]),e._v(" "),n("h3",{attrs:{id:"grepping-for-the-node-s-identity"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#grepping-for-the-node-s-identity"}},[e._v("#")]),e._v(" grepping for the Node's Identity")]),e._v(" "),n("p",[e._v("Finally to see if the node is properly registered, run the command (you may need\nto be in a docker container if you are using that):")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('$ export NODE_PUB_KEY="s+vZ71qeZnlq0HmQSDBiWn2OKcy3fXOuPMu76/5GkUI="\n$ oasis-node registry node list -v -a /serverdir/node/internal.sock | grep $NODE_PUB_KEY\n')])])]),n("p",[e._v("If "),n("code",[e._v("grep")]),e._v(" found the key, then you're properly connected!")]),e._v(" "),n("h2",{attrs:{id:"you-re-a-validator"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#you-re-a-validator"}},[e._v("#")]),e._v(" You're a Validator!")]),e._v(" "),n("p",[e._v("If you've made it this far you've properly connected your node to the network\nand you're now a Validator on the Public Testnet.")]),e._v(" "),n("h3",{attrs:{id:"maintenance-guides"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#maintenance-guides"}},[e._v("#")]),e._v(" Maintenance Guides")]),e._v(" "),n("ul",[n("li",[n("router-link",{attrs:{to:"/operators/maintenance/wiping-node-state.html"}},[e._v("Wiping Node State")])],1)])])}),[],!1,null,null,null);t.default=a.exports}}]);