(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{226:function(e,t,n){"use strict";n.r(t);var s=n(0),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"sentry-node-architecture"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sentry-node-architecture"}},[e._v("#")]),e._v(" Sentry Node Architecture")]),e._v(" "),n("p",[e._v("This guide provides instructions for a deployment using the Sentry node\narchitecture to protect validator nodes from being directly exposed on the\npublic network.")]),e._v(" "),n("p",[e._v("This guide assumes a setup where an Oasis validator node is only accessible\nover a private network, with sentry nodes having access to it.\nThe guide does not cover setting this infrastructure up.\nKnowledge of "),n("a",{attrs:{href:"https://cosmos.network/docs/cosmos-hub/validators/security.html#sentry-nodes-ddos-protection",target:"_blank",rel:"noopener noreferrer"}},[e._v("Tendermint's Sentry Node architecture"),n("OutboundLink")],1),e._v(" is assumed as\nwell.")]),e._v(" "),n("div",{staticClass:"custom-block danger"},[n("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),n("p",[e._v("This is only an example of a Sentry node deployment, and we take no responsibility\nfor mistakes contained therein.\nMake sure you understand what you are doing.")])]),e._v(" "),n("h2",{attrs:{id:"prerequisites"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites"}},[e._v("#")]),e._v(" Prerequisites")]),e._v(" "),n("p",[e._v("Before following this guide, make sure you've read the "),n("router-link",{attrs:{to:"/operators/prerequisites.html"}},[e._v("Prerequisites")]),e._v(" and\n"),n("router-link",{attrs:{to:"/operators/joining-the-testnet.html"}},[e._v("Joining the Testnet")]),e._v(" guides and created your Entity.")],1),e._v(" "),n("h2",{attrs:{id:"configuring-the-oasis-sentry-node"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configuring-the-oasis-sentry-node"}},[e._v("#")]),e._v(" Configuring the Oasis Sentry Node")]),e._v(" "),n("h3",{attrs:{id:"initializing-sentry-node"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#initializing-sentry-node"}},[e._v("#")]),e._v(" Initializing Sentry Node")]),e._v(" "),n("p",[e._v("Sentry node identity keys can be initialized with:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ oasis-node registry node init --entity /localhostdir/entity\n")])])]),n("p",[e._v("The generated "),n("code",[e._v("tls_identity_cert.pem")]),e._v(" (which is the node's TLS cert for\nsecuring gRPC connections) needs to be available on any node that will be\nrunning behind the sentry node.")]),e._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[e._v("NOTE")]),e._v(" "),n("p",[e._v("We plan to simplify this step in the future so that it won't involve Entity at\nall since Sentry node's identity keys are in no way linked to the Entity\nitself.\nSee "),n("a",{attrs:{href:"https://github.com/oasislabs/oasis-core/issues/2413",target:"_blank",rel:"noopener noreferrer"}},[e._v("Oasis Core #2413"),n("OutboundLink")],1),e._v(" for\nmore details.")])]),e._v(" "),n("h3",{attrs:{id:"configuring-sentry-node"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configuring-sentry-node"}},[e._v("#")]),e._v(" Configuring Sentry Node")]),e._v(" "),n("p",[e._v("An Oasis node can be configured to run as a sentry node by setting the\n"),n("code",[e._v("--worker.sentry.enabled")]),e._v(" flag. Additionally, the\n"),n("code",[e._v("--tendermint.private_peer_id")]),e._v(" flag can be used to configure a list of\nTendermint private peers, which should be set to Tendermint IDs of validator\nnodes, protected by this sentry node.")]),e._v(" "),n("p",[e._v("An example of full "),n("code",[e._v("YAML")]),e._v(" configuration of a sentry node is below.")]),e._v(" "),n("p",[e._v("Before using this configuration you should collect the following information to\nreplace the "),n("code",{pre:!0},[e._v("{{ var }}")]),e._v(" variables present in the configuration\nfile:")]),e._v(" "),n("ul",[n("li",[n("p",[n("code",[e._v("external_address")]),e._v(": This is the external IP you wish to use when registering\nthis node.")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("seed_node_address")]),e._v(": This the seed node address of the form "),n("code",[e._v("ID@IP:port")]),e._v(".\nYou can find the current Oasis Seed Node address in the "),n("router-link",{attrs:{to:"/operators/current-testnet-parameters.html"}},[e._v("Current Testnet\nParameters")]),e._v(".")],1)]),e._v(" "),n("li",[n("p",[n("code",[e._v("validator_tendermint_id")]),e._v(": This is the Tendermint ID of the Oasis validator\nnode that will be protected by the sentry node. This ID can be obtained by\nrunning:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ oasis-node debug tendermint show-node-id --datadir /serverdir/node\n")])])]),n("p",[e._v("on the validator node.")])])]),e._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("##")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Oasis Sentry Node Configuration")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This file's configurations are derived from the command line args found in the")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# root command of the oasis-node binary. For more information execute:")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#     oasis-node --help")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Settings on the command line that are separated by a dot all belong to the")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# same nested object. So "--foo.bar.baz hello" would translate to:')]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#     foo:")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#       bar:")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#         baz: hello")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("##")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set this to where you wish to store node data. The node artifacts")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# should also be located in this directory (for us this is /serverdir/node)")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("datadir")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" /serverdir/node\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Logging.")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Per-module log levels are defined below. If you prefer just one unified log")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# level, you can use:")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# log:")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   level: debug")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("level")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Per-module log levels. Longest prefix match will be taken. Fallback to")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# "default", if no match.')]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("default")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" debug\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("tendermint")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" warn\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("tendermint/context")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" error\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("format")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" JSON\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default logs are output to stdout. If you're running this in docker keep")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the default")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#file: /var/log/oasis-node.log")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Path to the genesis file for the current version of the network.")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("genesis")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("file")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" /serverdir/etc/genesis.json\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Worker configuration.")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("worker")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("sentry")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Enable sentry node.")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("enabled")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("true")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Port used by validator nodes to query sentry node for registry")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# information.")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# IMPORTANT: Only validator nodes protected by the sentry node should have")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# access to this port. This port should not be exposed on the public")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# network.")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("control_port")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("9009")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Tendermint backend configuration.")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("tendermint")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("core")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("listen_address")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" tcp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("//0.0.0.0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("26656")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("external_address")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" tcp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("//"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" external_address "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("26656")]),e._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("seeds")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"{{ seed_node_address }}"')]),e._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Sentry node should set validator IDs as private peer IDs.")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("private_peer_id")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"{{ validator_tendermint_id }}"')]),e._v("\n")])])]),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[e._v("NOTE")]),e._v(" "),n("p",[e._v("Multiple sentry nodes can be provisioned following the above steps.")])]),e._v(" "),n("h2",{attrs:{id:"configuring-the-oasis-validator-node"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configuring-the-oasis-validator-node"}},[e._v("#")]),e._v(" Configuring the Oasis Validator Node")]),e._v(" "),n("p",[e._v("In this setup the Oasis validator node should not be exposed directly on the public\nnetwork. The Oasis validator only needs to be able to connect to its sentry nodes, preferably\nvia a private network.")]),e._v(" "),n("h3",{attrs:{id:"initializing-validator-node"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#initializing-validator-node"}},[e._v("#")]),e._v(" Initializing Validator Node")]),e._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),n("p",[e._v("If your validator node is already registered and running in a non-sentry setup,\nthis step can be skipped as the Oasis validator will update its address in the\nRegistry automatically once we redeploy it with new configuration.")])]),e._v(" "),n("p",[e._v("When you are "),n("router-link",{attrs:{to:"/operators/joining-the-testnet.html#initializing-a-node"}},[e._v("initializing a validator node")]),e._v(", you should use the\nsentry node's external address in the "),n("code",[e._v("--node.consensus_address")]),e._v(" flag.\nIf you are running multiple sentry nodes, you can specify the\n"),n("code",[e._v("--node.consensus_address")]),e._v(" flag multiple times.")],1),e._v(" "),n("p",[e._v("To initialize a validator node with 2 sentry nodes' external addresses, run the\nfollowing commands from the "),n("code",[e._v("/localhostdir/node")]),e._v(" directory:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ export SENTRY1_STATIC_IP=<YOUR_SENTRY1_STATIC_IP>\n$ export SENTRY2_STATIC_IP=<YOUR_SENTRY2_STATIC_IP>\n$ oasis-node registry node init \\\n  --entity /localhostdir/entity \\\n  --node.consensus_address $SENTRY1_STATIC_IP:26656 \\\n  --node.consensus_address $SENTRY2_STATIC_IP2:26656 \\\n  --node.is_self_signed \\\n  --node.role validator\n")])])]),n("h3",{attrs:{id:"configuring-validator-node"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configuring-validator-node"}},[e._v("#")]),e._v(" Configuring Validator Node")]),e._v(" "),n("p",[e._v("There are some configuration changes needed for the Oasis validator node to\nenable proxying through its sentry node. Most of these flags should be familiar\nfrom the Tendermint sentry node architecture.")]),e._v(" "),n("p",[e._v("Since the validator node will not have an external address, the\n"),n("code",[e._v("--tendermint.core.external_address")]),e._v(" flag should be skipped. Similarly, the\n"),n("code",[e._v("--tendermint.seed")]),e._v(" flag can be skipped, as the "),n("code",[e._v("oasis-node")]),e._v(" won't be directly\nconnecting to any of the seed nodes.")]),e._v(" "),n("p",[e._v("Tendermint Peer Exchange should be disabled on the validator with the\n"),n("code",[e._v("--tendermint.disable_peer_exchange")]),e._v(" flag.")]),e._v(" "),n("p",[e._v("Sentry nodes should be configured as Tendermint Persistent-Peers with the\n"),n("code",[e._v("--tendermint.persistent_peer")]),e._v(" flag.")]),e._v(" "),n("p",[e._v("In addition to the familiar Tendermint setup above, the node needs to be\nconfigured to query sentry nodes for external addresses every time the validator\npreforms a re-registration. This is configured with "),n("code",[e._v("--worker.sentry.address")]),e._v("\nand "),n("code",[e._v("--worker.sentry.cert_file")]),e._v(" flags.")]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("--worker.sentry.address")]),e._v(" flag should be set to the (private) address of\nthe sentry node's control endpoint.")]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("--worker.sentry.cert_file")]),e._v(" flag should be set to the sentry node's client\ncertificate (named "),n("code",[e._v("tls_identity_cert.pem")]),e._v(" by default) created when\nprovisioning the sentry node's identity.")]),e._v(" "),n("p",[e._v("Putting it all together, an example configuration of a validator node in the\nsentry node architecture is given below.")]),e._v(" "),n("p",[e._v("Before using this configuration you should collect the following information to\nreplace the "),n("code",{pre:!0},[e._v("{{ var }}")]),e._v(" variables present in the configuration\nfile:")]),e._v(" "),n("ul",[n("li",[n("p",[n("code",[e._v("sentry_node_private_ip")]),e._v(": This is the private IP address of the sentry node\nover which sentry node should be accessible to the validator.")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("sentry_node_certificate")]),e._v(": For each sentry node address, a path to its gRPC\nTLS certificate is required (named "),n("code",[e._v("tls_identity_cert.pem")]),e._v(" by default).")]),e._v(" "),n("p",[e._v("This file is generated when provisioning the sentry node.\nThis certificate needs to be accessible on any node that's connecting to the\nsentry node's control endpoint and is used for securing the communication\nbetween the validator and the sentry node.")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("sentry_node_tendermint_id")]),e._v(": This is the Tendermint ID of the sentry node\nthat will be configured as a Persistent Peer. This ID can be obtained by\nrunning:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ oasis-node debug tendermint show-node-id --datadir /serverdir/node\n")])])]),n("p",[e._v("on the sentry node.")])])]),e._v(" "),n("div",{staticClass:"language-yaml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("##")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Oasis Node Configuration")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This file's configurations are derived from the command line args found in")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the root command of the oasis-node binary. For more information execute:")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#     oasis-node --help")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Settings on the command line that are separated by a dot all belong to the")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# same nested object. So "--foo.bar.baz hello" would translate to:')]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#     foo:")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#       bar:")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#         baz: hello")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("##")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set this to where you wish to store node data. The node artifacts")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# should also be located in this directory (for us this is /serverdir/node)")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("datadir")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" /serverdir/node\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Logging.")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Per-module log levels are defined below. If you prefer just one unified log")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# level, you can use:")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# log:")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   level: debug")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("level")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Per-module log levels. Longest prefix match will be taken. Fallback to")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# "default", if no match.')]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("default")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" debug\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("tendermint")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" warn\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("tendermint/context")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" error\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("format")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" JSON\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default logs are output to stdout. If you're running this in docker keep")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the default")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#file: /var/log/oasis-node.log")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Path to the genesis file for the current version of the network.")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("genesis")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("file")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" /serverdir/etc/genesis.json\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Worker configuration.")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("worker")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("registration")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# In order for the node to register itself the entity.json of the entity used to")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# provision the node must be available on the node")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("entity")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" /serverdir/node/entity/entity.json\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("sentry")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("address")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"{{ sentry_node_private_ip }}:9009"')]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("cert_file")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"{{ sentry_node_certificate }}"')]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Consensus backend.")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("consensus")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Setting this to true will mean that the node you're deploying will attempt")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to register as a validator.")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("validator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("True")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Tendermint backend configuration.")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("tendermint")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("abci")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("prune")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("strategy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" keep_n\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("num_kept")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("86400")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("core")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("listen_address")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" tcp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("//0.0.0.0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("26656")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("persistent_peer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"{{ sentry_node_tendermint_id }}@{{ sentry_node_private_ip }}:26656"')]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("disable_peer_exchange")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("True")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("db")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("backend")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" boltdb\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("debug")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("addr_book_lenient")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("False")]),e._v("\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);